# mesonettools.py
#
# Abhiram Pamula (apamula@okstate.edu)
# Ben Rubinstein (brubinst@hawk.iit.edu)
#
# last updated: 08/07/2022
#
# contains the MesonetTools class
import pandas as pd
import numpy as np
from okmesopy import MesonetDownloader

class MesonetTools:
    '''
    The MesonetTools class contains methods to assist with processing time
        series generated by the MesonetDownloader class.
    '''

    def __init__(self, verbose=False):
        '''
        init method for the MesonetTools class

        arguments:
            verbose is whether or not to write detailed debugging to stdout            
        '''
        self.verbose=verbose
        # 
        self.nondatcols=['STID','STNM','TIME','DATE','DATETIME']


    def replace_errors(self,df,code=1):
        '''
        Replace error codes in the dataset with NaN.
        
        Description of error codes:
            -999 - flagged bad by QA routines
            -998 - sensor not installed
            -997 - missing calibration coefficients
            -996 - station did not report
            -995 - data not reported on this time interval
            -994 - value is too wide to fit in column
        arguments:
            df is the dataframe to be manipulated
            code is the specific error code to be replaced, the default 1
                replaces all error codes
        '''
        if code==1:
            for i in range(-999,-994):
                df = df.replace(str(i),np.nan)
                df = df.replace(i,np.nan)
        # check if code is a valid error code
        elif code >= -999 and code <= -994:
            df = df.replace(str(i),np.nan)
            df = df.replace(i,np.nan)
        elif self.verbose:
            print('Warning: {} is not a valid error code. Nothing will be'
                  ' replaced. Use 1 or do not pass in a code argument to'
                  ' replace all error codes or enter one of the following:'
                  ' -994, -995, -996, -997, -998, -999.')
            print('help(MesonetTools.replace_errors) will give a description'
                  ' of the error codes.')
        return df


    def interpolate_missing(self,df,codes,columns):
        '''
        Fills missing data with simple linear interpolation between 

        arguments:
            verbose is whether or not to write detailed debugging to stdout            
        '''